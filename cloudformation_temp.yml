AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  RepositoryName:
    Type: String
    Default: tui-backend
    Description: Name for the task
  TaskName:
    Type: String
    Default: tui-backend-task
    Description: Name for the task
  ContainerName:
    Type: String
    Default: tui-backend-container
    Description: Name for the container
  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port on which the application will run inside the container
  ContainerCpu:
    Type: Number
    Default: 256
    Description: CPU to be given to each container
  ContainerMemory:
    Type: Number
    Default: 512
    Description: memory to be given to each container
  ClusterName:
    Type: String
    Default: "tui-backend-cluster"
    Description: Cluster Name
  ServiceName:
    Type: String
    Default: "tui-backend-service"
    Description: Service Name
  DesiredCount:
    Type: Number
    Default: 0
    Description: Desired count for the tasks
  ImageURL:
    Type: String
Resources:
  #Creating the ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref 'RepositoryName'
  #Creating the ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref 'ClusterName'
  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  #Creating the task definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'TaskName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      # TaskRoleArn:
      #   Fn::If:
      #     - 'HasCustomRole'
      #     - !Ref 'Role'
      #     - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ContainerName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageURL'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
  #Creating the Service
  Service:
    Type: AWS::ECS::Service
    #DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ClusterName'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      # NetworkConfiguration:
      #   AwsvpcConfiguration:
      #     AssignPublicIp: ENABLED
      #     SecurityGroups:
      #       - Fn::ImportValue:
      #           !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
      #     Subnets:
      #       - Fn::ImportValue:
      #           !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]
      #       - Fn::ImportValue:
      #           !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      # LoadBalancers:
      #   - ContainerName: !Ref 'ServiceName'
      #     ContainerPort: !Ref 'ContainerPort'
      #     TargetGroupArn: !Ref 'TargetGroup'
Outputs:
  RepoName:
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{ECRRepository}"
    Export:
      Name: 'RepoName'
    Description: Repository Name